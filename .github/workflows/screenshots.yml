name: PR Screenshots

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

jobs:
  screenshots:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
      
      - name: Install frontend dependencies
        run: |
          pnpm install --frozen-lockfile
          # Ensure Next.js is installed in the frontend directory
          cd frontend
          pnpm install --frozen-lockfile
          # Verify Next.js installation
          pnpm list next
      
      - name: Install backend dependencies
        run: |
          cd backend
          uv sync
      
      - name: Install Playwright
        run: |
          pnpm add -D -w playwright
          pnpm exec playwright install chromium
          pnpm exec playwright install-deps chromium
      
      - name: Setup test environment
        run: |
          echo "🔧 Setting up test environment..."
          
          # Backend environment with SQLite for testing
          cat > backend/.env << EOF
          DATABASE_URL=sqlite+aiosqlite:///./test_screenshots.db
          SUPABASE_URL=${{ secrets.SUPABASE_URL || '' }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY || '' }}
          ENVIRONMENT=test
          EOF
          
          # Frontend environment
          cat > frontend/.env.local << EOF
          NEXT_PUBLIC_API_URL=http://localhost:8000
          NEXT_PUBLIC_TEST_USER_ID=550e8400-e29b-41d4-a716-446655440000
          EOF
      
      - name: Run database migrations
        run: |
          cd backend
          # Check if migrations exist
          if [ -d "alembic/versions" ] && [ "$(ls -A alembic/versions/*.py 2>/dev/null)" ]; then
            echo "Running database migrations..."
            uv run alembic upgrade head
          else
            echo "No migrations found, initializing database..."
            # Create tables directly if no migrations exist
            uv run python ../scripts/init_db.py
          fi
      
      - name: Start services and take screenshots
        run: |
          # Start backend
          cd backend
          uv run uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          BACKEND_PID=$!
          cd ..
          
          # Start frontend (without Turbopack due to CI issues)
          cd frontend
          npx next dev &
          FRONTEND_PID=$!
          cd ..
          
          # Wait for services
          echo "⏳ Waiting for backend..."
          for i in {1..30}; do
            if curl -s http://localhost:8000/api/health > /dev/null 2>&1; then
              echo "✅ Backend is ready!"
              break
            fi
            sleep 2
          done
          
          echo "⏳ Waiting for frontend..."
          for i in {1..30}; do
            if curl -s http://localhost:3000 > /dev/null 2>&1; then
              echo "✅ Frontend is ready!"
              break
            fi
            sleep 2
          done
          
          # Seed test data
          cd backend
          uv run python ../scripts/seed_test_data.py
          cd ..
          
          # Take screenshots
          node scripts/take-screenshots.js
          
          # Cleanup
          kill $BACKEND_PID || true
          kill $FRONTEND_PID || true
      
      - name: Upload screenshots to branch
        run: |
          # Save screenshots to a temporary location before switching branches
          if [ -d "screenshots" ]; then
            cp -r screenshots /tmp/pr-screenshots
          else
            echo "No screenshots directory found"
            exit 1
          fi
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Stash any local changes (from Playwright install)
          git stash --include-untracked
          
          # Create unique folder for this PR
          PR_NUMBER="${{ github.event.pull_request.number || github.run_number }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SCREENSHOT_DIR="pr-${PR_NUMBER}/${TIMESTAMP}"
          
          echo "SCREENSHOT_TIMESTAMP=${TIMESTAMP}" >> $GITHUB_ENV
          echo "SCREENSHOT_PR=${PR_NUMBER}" >> $GITHUB_ENV
          
          # Switch to screenshots branch
          git fetch origin gh-screenshots 2>/dev/null || true
          
          if git show-ref --verify --quiet refs/remotes/origin/gh-screenshots; then
            git checkout gh-screenshots
            git pull origin gh-screenshots
          else
            git checkout --orphan gh-screenshots
            git rm -rf . 2>/dev/null || true
            echo "# Screenshots Branch" > README.md
            echo "This branch stores PR screenshots." >> README.md
            git add README.md
            git commit -m "Initialize screenshots branch"
          fi
          
          # Copy screenshots from temp location
          mkdir -p "$SCREENSHOT_DIR"
          cp -r /tmp/pr-screenshots/. "$SCREENSHOT_DIR/"
          
          # Update latest symlink
          rm -f "pr-${PR_NUMBER}/latest"
          ln -s "${TIMESTAMP}" "pr-${PR_NUMBER}/latest"
          
          # Commit and push
          git add "pr-${PR_NUMBER}"
          git commit -m "Screenshots for PR #${PR_NUMBER} (${TIMESTAMP})" || echo "No changes"
          git push origin gh-screenshots || git push --set-upstream origin gh-screenshots
      
      - name: Post screenshots to PR
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Define the expected screenshots (with numeric prefixes as saved by the script)
            const screenshots = [
              '01-desktop-home.png',
              '02-desktop-add-todo.png',
              '03-desktop-todo-hover.png',
              '04-mobile-home.png',
              '05-mobile-add-todo.png',
              '06-mobile-actions.png'
            ];
            
            const pr = context.issue.number;
            const timestamp = process.env.SCREENSHOT_TIMESTAMP;
            const baseUrl = `https://raw.githubusercontent.com/${context.repo.owner}/${context.repo.repo}/gh-screenshots/pr-${pr}/${timestamp}`;
            
            let comment = '## 📸 TodoHouse Screenshots\n\n';
            comment += `Updated at: ${new Date().toLocaleString()}\n\n`;
            
            // Desktop screenshots
            const desktop = screenshots.filter(s => s.includes('desktop'));
            if (desktop.length > 0) {
              comment += '### Desktop Views\n\n<table><tr>\n';
              desktop.forEach((s, i) => {
                if (i > 0 && i % 2 === 0) comment += '</tr><tr>\n';
                const name = s.replace('.png', '').replace(/^\d+-/, '').replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                comment += `<td align="center"><b>${name}</b><br>`;
                comment += `<img src="${baseUrl}/${s}" width="400" alt="${name}"></td>\n`;
              });
              comment += '</tr></table>\n\n';
            }
            
            // Mobile screenshots
            const mobile = screenshots.filter(s => s.includes('mobile'));
            if (mobile.length > 0) {
              comment += '### Mobile Views\n\n<table><tr>\n';
              mobile.forEach((s, i) => {
                if (i > 0 && i % 3 === 0) comment += '</tr><tr>\n';
                const name = s.replace('.png', '').replace(/^\d+-/, '').replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
                comment += `<td align="center"><b>${name}</b><br>`;
                comment += `<img src="${baseUrl}/${s}" width="200" alt="${name}"></td>\n`;
              });
              comment += '</tr></table>\n\n';
            }
            
            comment += `---\n*Generated by GitHub Actions*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: pr,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(c => 
              c.user.type === 'Bot' && 
              c.body.includes('📸 TodoHouse Screenshots')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: pr,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
      
