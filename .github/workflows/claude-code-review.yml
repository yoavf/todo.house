name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    # Skip review when only updating markdown docs
    paths-ignore:
      - '**/*.md'
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"

jobs:
  claude-review:
    # Optional: Filter by PR author
    # if: |
    #   github.event.pull_request.user.login == 'external-contributor' ||
    #   github.event.pull_request.user.login == 'new-developer' ||
    #   github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR'

    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: write  # Changed from read to write to allow creating issues
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        # Skip review for certain conditions
        if: |
          !contains(github.event.pull_request.title, '[skip-review]') &&
          !contains(github.event.pull_request.title, '[WIP]')
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"

          # Direct prompt for automated review (no @claude mention needed)
          direct_prompt: |
            IMPORTANT: This project is in MVP Development Phase. Please review accordingly.

            FIRST: Check existing GitHub issues in the repo to avoid duplicate suggestions. Use gh issue list to see what's already tracked.

            Please review this PR with MVP priorities in mind:

            1. CRITICAL ISSUES (must fix before merge):
               - Bugs that break functionality
               - Security vulnerabilities (unless obvious choices are made for testing and documented in the code)
               - Data loss risks

            2. NON-CRITICAL IMPROVEMENTS:
               For any non-critical improvements (code quality, performance, error handling, test coverage, architecture):
               - First check if a GitHub issue already exists using: gh issue list --repo yoavf/todo.house
               - If the improvement is NOT already tracked, use the todo-tracker-pm agent to create a GitHub issue
               - The todo-tracker-pm agent will verify the code and create properly formatted issues with appropriate priority levels

            IMPORTANT: Do NOT output markdown checklists or recommendations in your review comment.
            Instead, use the todo-tracker-pm agent to create GitHub issues for all non-critical improvements.

            The todo-tracker-pm agent will:
            - Verify if issues are still valid by examining the current code
            - Create GitHub issues with proper priority labels ([P0], [P1], [P2])
            - Link issues to the project board
            - Include code references and acceptance criteria

            Focus on teaching Python best practices where relevant in your review comments.

          # Optional: Use sticky comments to make Claude reuse the same comment on subsequent pushes to the same PR
          use_sticky_comment: true

          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality

          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' &&
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}

          # Allow Claude to use gh CLI for issue management and code inspection
          allowed_tools: "Bash(gh issue list),Bash(gh issue create),Bash(cat),Bash(grep),Bash(find),Read,Grep,Task"

